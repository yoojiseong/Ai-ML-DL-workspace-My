파이토치(PyTorch)
 페이스북의 인공지능 연구팀(FAIR)이 개발한 **오픈소스 머신러닝 라이브러리**입니다.
 🤖 파이썬을 기반으로 하며, 연구부터 실제 제품 배포까지 빠르고 유연하게 딥러닝 모델을 만들 수 있도록 돕는 강력한 도구입니다.
 직관적인 인터페이스와 유연성 덕분에 학계와 산업계에서 널리 사용되고 있습니다.

-----

## 파이토치의 핵심 개념

파이토치를 이해하기 위해 알아야 할 가장 중요한 세 가지 핵심 개념은
 **텐서(Tensor)**, **자동 미분(Automatic Differentiation)**, 그리고 \*\*`nn.Module`\*\*입니다.

### 1\. 텐서 (Tensor) 🧱

텐서는 파이토치의 **가장 기본적인 데이터 구조**입니다.
 간단히 말해, 우리가 아는 \*\*다차원 배열(multi-dimensional array)\*\*과 같습니다.
 숫자 데이터를 담는 그릇이라고 생각할 수 있습니다.

  * **스칼라 (0D 텐서):** 숫자 하나 (e.g., `5`)
  * **벡터 (1D 텐서):** 숫자의 배열 (e.g., `[1, 2, 3]`)
  * **행렬 (2D 텐서):** 숫자의 2차원 배열 (e.g., `[[1, 2], [3, 4]]`)
  * **3D 텐서 이상:** 여러 행렬의 묶음 (컬러 이미지(너비, 높이, 채널)나 동영상 데이터 등)

파이토치의 텐서는 NumPy의 배열과 매우 유사하지만, 결정적인 차이점이 있습니다.
바로 **GPU를 사용한 빠른 연산**이 가능하다는 점과 **자동 미분 기능**을 지원한다는 것입니다.

```python
import torch

# 2x3 행렬 형태의 텐서 생성
x = torch.tensor([[1, 2, 3],
                  [4, 5, 6]])
print(x)
```

### 2\. 자동 미분 (Autograd) 🔄

딥러닝은 모델의 예측값과 실제값의 오차를 줄이기 위해 경사 하강법(Gradient Descent)을 사용합니다.
이때 각 매개변수(가중치)에 대한 오차의 \*\*기울기(gradient)\*\*를 계산해야 하는데,
 이 복잡하고 반복적인 미분 과정을 파이토치가 **자동으로 계산**해주는 기능이 바로 `torch.autograd`입니다.

텐서에 `.requires_grad=True` 속성을 부여하면, 해당 텐서에 대한 모든 연산 기록을 파이토치가 추적합니다.
그리고 `.backward()` 함수를 호출하는 순간, 이 기록을 역으로 따라가며 각 매개변수에 대한 기울기를 자동으로 계산하여 `.grad` 속성에 저장해줍니다.

이 기능 덕분에 개발자는 복잡한 미분 수식을 직접 코딩할 필요 없이 모델 구조 설계에만 집중할 수 있습니다.

```python
# 가중치 w를 생성하고, 기울기를 추적하도록 설정
w = torch.tensor(2.0, requires_grad=True)
y = w**2
z = 2*y + 5

# z에 대해 w의 기울기를 계산
z.backward()

# 계산된 기울기 출력
print(w.grad) # dz/dw = 4*w = 4 * 2.0 = 8.0
```

### 3\. `nn.Module` 과 `optim` 🧠

  * **`nn.Module`**: 신경망 모델을 만드는 데 필요한 모든 계층(layer)과 기능들이 담겨있는 \*\*기본 설계도(blueprint)\*\*와 같습니다.
   신경망을 만들려면 이 `nn.Module` 클래스를 상속받아, 모델의 구조(계층들)를 `__init__` 함수에 정의하고,
   데이터가 모델을 통과하는 과정(순전파)을 `forward` 함수에 정의합니다. 이렇게 하면 모델의 학습 가능한 매개변수들이 자동으로 관리됩니다.

  * **`torch.optim`**: 계산된 기울기를 사용하여 모델의 가중치를 실제로 **업데이트하는 역할**을 하는 최적화 알고리즘(e.g., `SGD`, `Adam`)의 모음입니다.

이 두 가지를 함께 사용하면 신경망의 구조를 체계적으로 설계하고, 단 몇 줄의 코드로 학습 과정을 효율적으로 관리할 수 있습니다.

```python
import torch.nn as nn

# nn.Module을 상속받아 간단한 선형 모델 정의
class MyModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(in_features=10, out_features=1) # 입력 10개, 출력 1개

    def forward(self, x):
        return self.linear(x) # 순전파 로직

model = MyModel()
print(model)
```

-----

## 파이토치의 특징 요약

  * **직관성과 유연성:** 파이썬의 문법과 유사하여 배우기 쉽고, 'Define-by-Run' 방식을 채택하여 코드를 실행하면서 계산 그래프를 생성(동적 계산 그래프)하므로 디버깅이 용이하고 유연한 모델 구조를 만들 수 있습니다.
  * **강력한 GPU 지원:** 몇 줄의 코드만으로 데이터와 모델 연산을 CPU에서 GPU로 쉽게 전환하여 학습 속도를 크게 높일 수 있습니다.
  * **풍부한 생태계:** 모델 배포를 위한 `TorchServe`, 모바일 환경을 위한 `PyTorch Mobile` 등 다양한 도구와 라이브러리를 지원하여 연구에서 실제 서비스까지의 과정을 원활하게 연결합니다.